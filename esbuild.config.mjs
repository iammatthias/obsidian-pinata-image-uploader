import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import { existsSync, mkdirSync, copyFileSync } from "fs";
import { dirname } from "path";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";
const outfile = "dist/main.js";

// Ensure the output directory exists
const outDir = dirname(outfile);
if (!existsSync(outDir)) {
	mkdirSync(outDir, { recursive: true });
}

// Copy manifest.json and styles.css to dist
function copyFilesToDist() {
	copyFileSync("manifest.json", `${outDir}/manifest.json`);
	copyFileSync("styles.css", `${outDir}/styles.css`);
	console.log("Copied manifest.json and styles.css to dist directory");
}

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins,
	],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: outfile,
	minify: prod,
});

if (prod) {
	await context.rebuild();
	copyFilesToDist();
	process.exit(0);
} else {
	await context.watch();
	copyFilesToDist();

	// Set up file watchers for manifest.json and styles.css
	console.log("Watching for changes in manifest.json and styles.css...");
	context.watch({
		onRebuild(error) {
			if (error) {
				console.error("Watch build failed:", error);
			} else {
				copyFilesToDist();
				console.log("Build successful, files copied to dist");
			}
		},
	});
}
